#![feature(allocator_api)]
#![no_std]
#![no_main]

extern crate alloc;

mod boot;
mod console;
mod cpu;
mod interrupt;
mod memory;
mod spinlock;

const ONIX_VERSION: &str = env!("CARGO_PKG_VERSION");
// Generated by https://www.asciiart.eu/text-to-ascii-art
// with Font = Big
const ONIX_LOGO: &str = r"
  ____        _
 / __ \      (_)
| |  | |_ __  ___  __
| |  | | '_ \| \ \/ /
| |__| | | | | |>  <
 \____/|_| |_|_/_/\_\
";

fn primary_cpu_entry(cpuid: usize, dtb_pa: usize) -> *mut u8 {
    println!("\n\nOnix v{ONIX_VERSION}\n{ONIX_LOGO}");

    let (dtree, heap_layout) = unsafe { memory::allocator::init(dtb_pa).unwrap() };
    println!("\nDevicetree:\n{}", dtree.root_node());

    cpu::init(&dtree).unwrap();
    cpu::set_current_cpuid(cpuid);

    memory::kernel_space::init(&heap_layout).unwrap();
    memory::kernel_space::apply();

    cpu::current_cpu().stack_top()
}

fn primary_cpu_reentry() -> ! {
    interrupt::trap::apply();
    interrupt::timer::start();

    unsafe {
        riscv::interrupt::enable();
    }

    let cpu = cpu::current_cpu();

    panic!("Kernel main function called (CPU ID: {})", cpu.id());
}
