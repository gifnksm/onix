#![feature(allocator_api)]
#![no_std]
#![no_main]

use core::{
    hint,
    sync::atomic::{AtomicUsize, Ordering},
};

use devicetree::parsed::Devicetree;
use spin::Once;

extern crate alloc;

#[macro_use]
mod console;
#[macro_use]
mod log;

mod boot;
mod cpu;
mod interrupt;
mod memory;
mod spinlock;

const ONIX_VERSION: &str = env!("CARGO_PKG_VERSION");
// Generated by https://www.asciiart.eu/text-to-ascii-art
// with Font = Big
const ONIX_LOGO: &str = r"
  ____        _
 / __ \      (_)
| |  | |_ __  ___  __
| |  | | '_ \| \ \/ /
| |__| | | | | |>  <
 \____/|_| |_|_/_/\_\
";

static PRIMARY_CPUID: AtomicUsize = AtomicUsize::new(usize::MAX);
static DEVICETREE: Once<Devicetree> = Once::new();

fn primary_cpu_entry(cpuid: usize, dtb_pa: usize) -> *mut u8 {
    PRIMARY_CPUID.store(cpuid, Ordering::Release);

    println!();
    println!();
    println!("Onix v{ONIX_VERSION}");
    println!("{ONIX_LOGO}");

    let (dtree, heap_layout) = unsafe { memory::allocator::init(dtb_pa).unwrap() };
    DEVICETREE.call_once(|| dtree);
    let dtree = DEVICETREE.get().unwrap();

    cpu::init(dtree).unwrap();
    cpu::set_current_cpuid(cpuid);
    memory::kernel_space::init(&heap_layout).unwrap();
    memory::kernel_space::apply();
    cpu::current().stack_top()
}

fn secondary_cpu_entry(cpuid: usize) -> *mut u8 {
    cpu::set_current_cpuid(cpuid);
    memory::kernel_space::apply();
    cpu::current().stack_top()
}

fn main() -> ! {
    let primary_cpuid = PRIMARY_CPUID.load(Ordering::Acquire);
    let is_primary = primary_cpuid == cpu::current().id();

    if is_primary {
        start_secondary_cpus();
    }

    interrupt::trap::apply();
    interrupt::timer::start();

    unsafe {
        riscv::interrupt::enable();
    }

    info!("CPU initialized (CPU ID: {})", cpu::current().id());
    loop {
        hint::spin_loop();
    }
}

fn start_secondary_cpus() {
    for cpu in cpu::get_all() {
        if cpu.is_current() {
            continue;
        }
        boot::start_secondary_cpu(cpu.id());
    }
}
