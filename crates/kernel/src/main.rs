#![feature(allocator_api)]
#![no_std]
#![no_main]

extern crate alloc;

use devicetree::{
    Devicetree,
    struct_lexer::{StructLexerError, StructTokenWithData},
};

mod boot;
mod console;
mod interrupt;
mod memory;
mod spinlock;

const ONIX_VERSION: &str = env!("CARGO_PKG_VERSION");
// Generated by https://www.asciiart.eu/text-to-ascii-art
// with Font = Big
const ONIX_LOGO: &str = r"
  ____        _
 / __ \      (_)
| |  | |_ __  ___  __
| |  | | '_ \| \ \/ /
| |__| | | | | |>  <
 \____/|_| |_|_/_/\_\
";

fn boot_hart_start(boot_hartid: usize, dtb_pa: usize) -> ! {
    println!("\n\nOnix v{ONIX_VERSION}\n{ONIX_LOGO}");

    println!("Boot Hart ID : {boot_hartid}");
    println!("Devicetree Address : {dtb_pa:#x}");

    let dtb_bytes = unsafe { memory::allocator::init(dtb_pa).unwrap() };

    let dtb = unsafe { Devicetree::from_addr(dtb_bytes.as_ptr().addr()).unwrap() };
    dump_dtb_tree(&dtb).unwrap();

    memory::kernel_space::init(&dtb).unwrap();
    memory::kernel_space::apply();

    panic!("Kernel main function called");
}

fn dump_dtb_tree(dtb: &Devicetree<'_>) -> Result<(), StructLexerError> {
    println!("\nDevicetree:");
    let mut nest = 0;
    for entry in dtb.struct_lexer() {
        let entry = entry?;
        match entry {
            StructTokenWithData::BeginNode { mut name, address } => {
                if nest == 0 && name.is_empty() {
                    name = "/";
                }
                println!();
                if let Some(address) = address {
                    println!("{:indent$}{name}@{address} {{", "", indent = nest * 4);
                } else {
                    println!("{:indent$}{name} {{", "", indent = nest * 4);
                }
                nest += 1;
            }
            StructTokenWithData::EndNode => {
                nest -= 1;
                println!("{:indent$}}};", "", indent = nest * 4);
            }
            StructTokenWithData::Prop(p) => {
                let name = p.name();
                let value = p.value().unwrap();
                println!("{:indent$}{name} = {value};", "", indent = nest * 4);
            }
            StructTokenWithData::Nop => {}
            StructTokenWithData::End => break,
        }
    }
    Ok(())
}
